-- 1. 지점별 승인된 대출의 총 금액을 계산한 뒤, 해당 금액이 전체 지점에서 승인된 대출 금액의
-- 평균보다 낮은 지점의 지점명과 승인된 대출의 총 금액, 전체 지점에서 승인된 대출 금액의 평균을 출력하세요.
-- 평균값은 반올림하여 소수점 아래 둘째자리까지 표현합니다.


SELECT 
    B.NAME, 
    S.SUM, 
    ROUND(S.TOTAL_AVG_SUM, 2) AS TOTAL_AVG_SUM
FROM 
(
    SELECT 
        DISTINCT BRANCH_ID,
        SUM(AMOUNT) OVER(PARTITION BY BRANCH_ID) AS SUM,
        AVG(AMOUNT) OVER() AS TOTAL_AVG_SUM
    FROM LOANS
    WHERE STATUS = 'APPROVED'
) S
LEFT JOIN BRANCHES B
ON B.BRANCH_ID = S.BRANCH_ID
WHERE S.SUM < S.TOTAL_AVG_SUM;

-- 2. 
-- 모든 직원의 사번, 이름, 상사의 이름, 상사의 부서 이름,
--  상사 없으면 노 매니저 / 상사 속한 부서 없으면 노 디파트

SELECT 
    E.EMPLOYEE_ID,
    E.NAME,
    NVL((SELECT NAME FROM EMPLOYEES E1 WHERE S.MANAGER_ID = E1.EMPLOYEE_ID), 'NO MANAGER') AS MANAGER_NAME,
    NVL((SELECT DEPARTMENT_NAME FROM DEPARTMENTS D WHERE S.DEPARTMENT_ID = D.DEPARTMENT_ID), 'NO DEPARTMENT') AS DEPARTMENT_NAME
FROM EMPLOYEES E
INNER JOIN(
    SELECT *
    FROM EMPLOYEES
    START WITH MANAGER_ID IS NULL
    CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID
) S
ON E.EMPLOYEE_ID = S.EMPLOYEE_ID;

-- SELF JOIN VERSION
SELECT
    E1.EMPLOYEE_ID,
    E1.NAME,
    NVL((SELECT NAME FROM EMPLOYEES E2 WHERE E1.MANAGER_ID = E2.EMPLOYEE_ID), 'NO MANAGER') AS MANAGER_NAME,
    NVL((SELECT DEPARTMENT_NAME FROM DEPARTMENTS D WHERE E1.DEPARTMENT_ID = D.DEPARTMENT_ID), 'NO DEPARTMENT') AS DEPARTMENT_NAME
FROM EMPLOYEES E1;


--3. 
-- 직원 급여 + 전체 직원 급여의 백분율
-- 사번, 이름, 급여, 백분율
-- 백분율 내림차, 급여 없는 직원 제외

SELECT 
    EMPLOYEE_ID,
    NAME,
    SALARY,
    ROUND(SALARY / SUM(SALARY) OVER() * 100, 2) AS PERCENT
FROM EMPLOYEES
WHERE SALARY IS NOT NULL
ORDER BY PERCENT DESC;


-- 4.
-- 
--

SELECT 
*
    FROM(
        SELECT 
        ACCOUNT_ID,
        MAX,
        DENSE_RANK() OVER(ORDER BY MAX DESC) AS RANKING
        
        FROM
            (
                SELECT 
                ACCOUNT_ID,      
                MAX(BALANCE) OVER(PARTITION BY ACCOUNT_ID) AS MAX
                FROM ACCOUNTS  
            ) 
        )
WHERE RANKING <= 5;

-- 개선 방안
SELECT 
    ACCOUNT_ID,
    MAX_BALANCE,
    RANKING
FROM (
    SELECT 
        ACCOUNT_ID,
        MAX(BALANCE) AS MAX_BALANCE,
        DENSE_RANK() OVER (ORDER BY MAX(BALANCE) DESC) AS RANKING
    FROM 
        ACCOUNTS
    GROUP BY 
        ACCOUNT_ID
) RANKED_ACCOUNTS
WHERE 
    RANKING <= 5;

-- 5.
SELECT
    DEPARTMENT_ID,
    MAX(SALARY)-MIN(SALARY) AS CHA
FROM EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY(DEPARTMENT_ID)
ORDER BY DEPARTMENT_ID ASC;


-- 6.
-- 부서별 평균 급여 - 자신의 급여(양수, 음수)
-- 사번, 이름, 급여, 부서 평균 급여, 급여 차이(반올림 - 정수)

SELECT 
    EMPLOYEE_ID,
    NAME,
    SALARY,
    AVG(SALARY) OVER(PARTITION BY DEPARTMENT_ID) AS AVG,
    ROUND(SALARY - AVG(SALARY) OVER(PARTITION BY DEPARTMENT_ID),0) AS CHA
FROM EMPLOYEES;

-- 7. 이름이 'Employee 241'인 사원의 모든 상사들을 출력. 출력 데이터는 한 줄(가장 긴)

SELECT
    LTRIM(SYS_CONNECT_BY_PATH(NAME, ' > '), ' > ') AS path
FROM EMPLOYEES
WHERE CONNECT_BY_ISLEAF = 1 -- 1은 리프노드, 0은 리프 노드 이외의 노드
START WITH name = 'Employee 241'
CONNECT BY EMPLOYEE_ID = prior MANAGER_ID;


-- 8.
SELECT * FROM(
    SELECT
        SALARY,
        NAME,
    RANK() OVER(ORDER BY SALARY DESC, NAME ASC)
    FROM EMPLOYEES
    WHERE SALARY IS NOT NULL)
WHERE ROWNUM <= 10;

-- 9.
SELECT 
    NVL(TO_CHAR(EXTRACT(YEAR FROM HIRE_DATE)), 'ALL YEARS') AS YEAR,
    SUM(SALARY)
FROM EMPLOYEES
GROUP BY ROLLUP(EXTRACT(YEAR FROM HIRE_DATE));

-- 10.



    SELECT
        E.DEPARTMENT_ID,
        E.JOB_ID,
        SUM(E.SALARY) AS SUM
    FROM EMPLOYEES E, DEPARTMENTS D
    WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
    GROUP BY GROUPING SETS(E.DEPARTMENT_ID, E.JOB_ID, ())
    ORDER BY DEPARTMENT_ID, JOB_ID;
    

-- 11.
SELECT
    DEPARTMENT_ID,
    NAME,
    SALARY,
    (
        SELECT SUM(SALARY)
        FROM EMPLOYEES E2
        WHERE E1.DEPARTMENT_ID = E2.DEPARTMENT_ID AND
        E2.SALARY BETWEEN E1.SALARY - 100 AND E1.SALARY + 100
    ) AS SUM_SALARY
    
FROM EMPLOYEES E1
WHERE SALARY IS NOT NULL
ORDER BY NAME DESC NULLS LAST;

SELECT
    DEPARTMENT_ID,
    NAME,
    SALARY,
    SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY RANGE BETWEEN 100 PRECEDING AND 100 FOLLOWING) AS SUM_SALARY
FROM EMPLOYEES
WHERE SALARY IS NOT NULL
ORDER BY NAME DESC NULLS LAST;


-- 12. 
SELECT 
    EMPLOYEE_ID,
    SALARY,
    CASE
        WHEN AVG(SALARY) OVER(PARTITION BY JOB_ID) > SALARY THEN '직무 평균 이상'
        ELSE '직무 평균 이하'
    END RESULT1,
    CASE
        WHEN AVG(SALARY) OVER() > SALARY THEN '전체 평균 이상'
        ELSE '전체 평균 이하'
    END RESULT2
FROM EMPLOYEES
WHERE SALARY IS NOT NULL;



